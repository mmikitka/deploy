#!/usr/bin/env python3

import argparse
from datetime import datetime
import os
import re


parser = argparse.ArgumentParser()
parser.add_argument('--start', default='2020-02-13')
parser.add_argument('--end', default='2030-01-01')
parser.add_argument('--units', default='hours')
args = parser.parse_args()

start = datetime.fromisoformat(args.start)
end = datetime.fromisoformat(args.end)

sum_date_task = {}
sum_tasklevel1 = {}
sum_tasklevel2 = {}
sum_tasklevel3 = {}
with open(os.path.expanduser('/home/matt/Documents/valencraft/time-management/'
                             'tasklog.csv'), 'r') as f:
    cur_task_start = None
    cur_task = None
    for line in f.readlines():
        last_task_start = cur_task_start
        last_task = cur_task
        parts = line.strip().split(',')
        cur_task_start = datetime.fromisoformat(parts[0])
        cur_task = parts[1]
        if (last_task_start is None
                or last_task is None):
            continue
        if (cur_task_start >= start
                and cur_task_start <= end
                and not re.match(r'personal:.+', last_task)):
            last_task_delta = cur_task_start - last_task_start
            last_date = last_task_start.strftime("%Y-%m-%d")
            if last_date not in sum_date_task:
                sum_date_task[last_date] = {}
            if last_task not in sum_date_task[last_date]:
                sum_date_task[last_date][last_task] = 0
            sum_date_task[last_date][last_task] += last_task_delta.total_seconds()

            # Task (level 1)
            key = last_task.split(':')[0]
            if key not in sum_tasklevel1:
                sum_tasklevel1[key] = 0
            sum_tasklevel1[key] += last_task_delta.total_seconds()

            # Task (level 2)
            key = ':'.join(last_task.split(':')[0:2])
            if key not in sum_tasklevel2:
                sum_tasklevel2[key] = 0
            sum_tasklevel2[key] += last_task_delta.total_seconds()

            # Task (all)
            key = ':'.join(last_task.split(':')[0:3])
            if key not in sum_taskall:
                sum_taskall[key] = 0
            sum_taskall[key] += last_task_delta.total_seconds()

# Group by date,task (all levels)
print('By date, task')
print('-------------')
total = 0
for d in sorted(sum_date_task.keys()):
    print(d)
    for t in sorted(sum_date_task[d]):
        if args.units == 'minutes':
            duration = sum_date_task[d][t] / 60.0
        elif args.units == 'hours':
            duration = sum_date_task[d][t] / 3600.0
        else:
            raise ValueError('Invalid units')
        total += duration
        print(f'\t{t}: {duration:.1f}')
print('')

# Group by task (level 1)
print('By task level 1')
print('---------------')
for key in sorted(sum_tasklevel1.keys()):
    if args.units == 'minutes':
        duration = sum_tasklevel1[key] / 60.0
    elif args.units == 'hours':
        duration = sum_tasklevel1[key] / 3600.0
    else:
        raise ValueError('Invalid units')
    print(f'{key}: {duration:.1f}')
print('')

# Group by task (level 2)
print('By task level 2')
print('---------------')
for key in sorted(sum_tasklevel2.keys()):
    if args.units == 'minutes':
        duration = sum_tasklevel2[key] / 60.0
    elif args.units == 'hours':
        duration = sum_tasklevel2[key] / 3600.0
    else:
        raise ValueError('Invalid units')
    print(f'{key}: {duration:.1f}')
print('')

# Group by task (all)
print('By task')
print('-------')
for key in sorted(sum_taskall.keys()):
    if args.units == 'minutes':
        duration = sum_taskall[key] / 60.0
    elif args.units == 'hours':
        duration = sum_taskall[key] / 3600.0
    else:
        raise ValueError('Invalid units')
    print(f'{key}: {duration:.1f}')

print(f'Total: {total:.1f}')
